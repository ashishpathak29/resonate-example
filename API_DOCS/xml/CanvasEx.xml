<?xml version="1.0" encoding="UTF-8"?><?xml-stylesheet type="text/xsl" href="xslt/class.xsl"?><class name="CanvasEx" namespace="com.crackerbarrel.components" extends="com.crackerbarrel.components.UIComponent" author="Christopher Swenson" version="0.0.1">	<description><![CDATA[Wrapper class around the kineticJS canvas]]></description>	<constructor>	<param name="id" type="String">		<![CDATA[id of the object]]>	</param>	<param name="left" type="Int">		<![CDATA[left position of the accordion]]>	</param>	<param name="top" type="Int">		<![CDATA[top position of the accordion]]>	</param>	<param name="uiStyle" type="CanvasExStyle=null">		<![CDATA[style data to pass to the Canvas]]>	</param>	<return type="Object"><![CDATA[the new CanvasEx]]>	</return></constructor>	<property name="isAnimating" type="Boolean">		<![CDATA[Is the canvas currently receiving frame update requests?]]>	</property>	<method name="addLayer">	<description><![CDATA[Creates or adds a layer and adds it to the canvas]]></description>	<param name="layer" type="Kinetic.Layer=null">		<![CDATA[The layer to add. If nothing is passed a new layer is created.]]>	</param>	<return type="Kinetic.Layer">	</return></method>	<method name="createLayer">	<description><![CDATA[Creates a new layer but does not add it to the canvas]]></description>	<return type="Kinetic.Layer">	</return></method>	<method name="addShape">	<description><![CDATA[Adds a shape to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the shape to.]]>	</param>	<param name="shape" type="Kinetic.Shape">		<![CDATA[The shape to add to the layer]]>	</param>	<return type="Kinetic.Shape">	</return></method>	<method name="addRect">	<description><![CDATA[Adds a Rect to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the shape to.]]>	</param>	<param name="params" type="Object">		<![CDATA[An object containing the parameters to create the shape with]]>	</param>	<return type="Kinetic.Shape">	</return></method>	<method name="addCircle">	<description><![CDATA[Adds a Circle to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the shape to.]]>	</param>	<param name="params" type="Object">		<![CDATA[An object containing the parameters to create the shape with]]>	</param>	<return type="Kinetic.Shape">	</return></method>	<method name="addLine">	<description><![CDATA[Adds a Line to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the shape to.]]>	</param>	<param name="params" type="Object">		<![CDATA[An object containing the parameters to create the shape with]]>	</param>	<return type="Kinetic.Shape">	</return></method>	<method name="addPolygon">	<description><![CDATA[Adds a Polygon to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the shape to.]]>	</param>	<param name="params" type="Object">		<![CDATA[An object containing the parameters to create the shape with]]>	</param>	<return type="Kinetic.Shape">	</return></method>	<method name="addGroup">	<description><![CDATA[Adds a Group to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the group to.]]>	</param>	<param name="params" type="Object">		<![CDATA[An object containing the parameters to create the group with]]>	</param>	<return type="Kinetic.Shape">	</return></method>	<method name="addText">	<description><![CDATA[Adds a Text object to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the shape to.]]>	</param>	<param name="params" type="Object">		<![CDATA[An object containing the parameters to create the shape with]]>	</param>	<return type="Kinetic.Shape">	</return></method>	<method name="addImage">	<description><![CDATA[Adds an Image to the given layer]]></description>	<param name="layer" type="Kinetic.Layer">		<![CDATA[The layer to add the Image to.]]>	</param>	<param name="image" type="String">		<![CDATA[Path to the image]]>	</param>	<param name="params" type="Object">		<![CDATA[An object containing the parameters to create the Image with]]>	</param>	<return type="Kinetic.Image">	</return></method>	<method name="setDraggable">	<description><![CDATA[Changes the objects draggable property]]></description>	<param name="obj" type="Kinetic.Node">		<![CDATA[The object to set draggable.]]>	</param>	<param name="value" type="Boolean">		<![CDATA[True/False Should the object be draggable]]>	</param>	<return type="Void">	</return></method>	<method name="collides">	<description><![CDATA[Checks to see if two objects are overlapping.]]></description>	<param name="obj1" type="Kinetic.Node">		<![CDATA[The first object]]>	</param>	<param name="obj2" type="Kinetic.Node">		<![CDATA[The second object]]>	</param>	<return type="Boolean"><![CDATA[True/False Are the objects colliding?]]>	</return></method>	<method name="align">	<description><![CDATA[Aligns two objects]]></description>	<param name="obj1" type="Kinetic.Node">		<![CDATA[The first object]]>	</param>	<param name="obj2" type="Kinetic.Node">		<![CDATA[The second object]]>	</param>	<param name="style" type="String=center">		<![CDATA[The alignment style. Currently only center and topLeft are supported]]>	</param>	<return type="Void">	</return></method>	<method name="clear">	<description><![CDATA[Clears and repaints the canvas.]]></description>	<return type="Void">	</return></method>	<method name="repaint">	<description><![CDATA[Repaints the canvas.]]></description>	<return type="Void">	</return></method>	<method name="animate">	<description><![CDATA[Starts the animation loop]]></description>	<return type="Void">	</return></method>	<method name="stopAnimation">	<description><![CDATA[Stops the animation loop]]></description>	<return type="Void">	</return></method>	<method name="setScale">	<description><![CDATA[Scales the Canvas to the given ratio]]></description>	<param name="ratio" type="Int">		<![CDATA[The ratio to scale the canvas]]>	</param>	<return type="Void">	</return></method>	<method name="destroy">	<description><![CDATA[Cleanly destroys the Cavnas and frees it from memory]]></description>	<return type="Void">	</return></method></class>